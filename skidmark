#!/usr/bin/env php
<?php
array_shift($argv);
$file = $argv[0];
$class = basename($file, '.php');

$classes = get_declared_classes();
if (!file_exists($file)) {
    echo sprintf("Test file '%s' does not exist. Aborting.\n", $file);
    exit(1);
}
require_once($file);
$file_classes = array_diff(get_declared_classes(), $classes);

foreach ($file_classes as $file_class) {
    $bits = explode('\\', $file_class);
    if (array_pop($bits) == $class) {
        $obj = new $file_class();
        $reflObj = new \ReflectionObject($obj);
        break;
    }
}

$timer = 0;

$methods = $reflObj->getMethods(\ReflectionMethod::IS_PUBLIC);
foreach ($methods as $method) {
    $methodName = $method->getName();
    if (0 === stripos($methodName, 'test')) {
        $start = xdebug_time_index();
        $obj->{$methodName}();
        $timer += (xdebug_time_index() - $start);
    }
}

echo \skidmark::getStats($timer);

class skidmark
{

    protected static $tests = 0;
    protected static $failed = 0;

    public static function ASSERT($assertion)
    {
        echo sprintf("%s:%d\t\t%s\n", xdebug_call_file(), xdebug_call_line(), $assertion ? 'ok' : 'FAILED');
        ++self::$tests;
        if (!$assertion) {
            ++self::$failed;
        }
    }

    public static function getStats($timer)
    {
        return sprintf("\nskidmark: %d tests, %d failed, %f seconds\n", self::$tests, self::$failed, $timer);
    }

}
